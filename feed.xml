<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://volhovm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://volhovm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-19T14:23:42+00:00</updated><id>https://volhovm.github.io/feed.xml</id><title type="html">blank</title><subtitle>Misha Volkhov&apos;s personal website. </subtitle><entry><title type="html">Visualising Estimates in org-mode’s Agenda</title><link href="https://volhovm.github.io/blog/2023/org-estimates/" rel="alternate" type="text/html" title="Visualising Estimates in org-mode’s Agenda"/><published>2023-04-13T00:00:00+00:00</published><updated>2023-04-13T00:00:00+00:00</updated><id>https://volhovm.github.io/blog/2023/org-estimates</id><content type="html" xml:base="https://volhovm.github.io/blog/2023/org-estimates/"><![CDATA[<style type="text/css">p{text-align:justify}figure{text-align:center;margin-left:auto;margin-right:auto;max-width:85%}</style> <blockquote> <p><small><strong>TLDR</strong>: <em>things many, computer complex &amp; scary, visual agenda good, brain control no panic</em>.</small></p> </blockquote> <p>If you're using org-mode and tend to over-organise things hoping that that will improve your productivity or mood (which it might, or might not!), then there's a high chance you at least once found yourself in the following situation. You spend a weekend somewhere, maybe even not opening your computer for a few days, only to return back on Monday and see this:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-bad-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-bad-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-bad-1400.webp"/> <img src="/assets/img/2023-04-13-org-estimates/agenda-bad.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>(Some of the tasks are fictional.)</em></p> <p>…which in my case leads to generally assuming that I cannot do a lot of work on Monday, because Monday is … well … a day for stressful admin resolution. And not just Monday – quite often I have at least 20 elements in my agenda, plus calendar in firefox, plus journal, plus physical notebooks, plus you need to bring this thing to the office and that home, plus <em>"a delivery fee and just a few pounds for a 4-pack of Tennets luv"</em>.</p> <p>At some point I really took some time to consider the advice from a certain person who is giving me advice. And the advice was <em>"omg no wonder you feel like this the whole time"</em>, to which I immediately started replying <em>"nono wait you don't understand, see – it is this and this is that and this is a category and this colour means blocked and"</em>, and she was actually right. My agenda is quite cluttered, and ritalin won't help. However not using the agenda is not an option… take it as an assumption.</p> <p>Instead I wrote some elisp, that roughly follows some GTD-like approach (maybe), that makes my agenda <strong>less cluttered</strong> and implicitly <strong>pushes me towards certain organisational strategies</strong> that seem nice.</p> <p>The strategies are:</p> <ol> <li>Assigning task priorities based on urgency+importance, aka Eisenhower Matrix approach, through org priorities. <ul> <li>And not using tags or putting tasks in different subtrees, because priorities change often, and there's no incentive to move tasks around.</li> <li>And not just sorting things according to categories like "social", "music", "writing" etc.</li> </ul> </li> <li>Keeping tasks small and clearly stated. <ul> <li>Ideally not like "Figure out problem X"</li> </ul> </li> <li>Understanding time estimates and portioning tasks. Making sure it's doable within a day. <ul> <li>Small tasks must <em>look</em> like they are small.</li> <li>If it's a big task (which it shouldn't be), the task presence in the agenda must mean doing <em>a bit</em> of that task.</li> </ul> </li> <li>Making separation between work and non-work tasks clear to minimise mixing the contexts.</li> </ol> <p>If you are me and reading this you probably feel like <em>"thanks, 5 more rules to follow, as if I don't have a million rules already"</em>. You're right! However, the trick is to force the <em>environment</em> to force you to do this. In my particular case this boils down to making agenda look nice and pretty only when all these conditions are satisfied; and ugly otherwise.</p> <p>Now, that's what my new agenda looks like after sorting:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-good-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-good-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2023-04-13-org-estimates/agenda-good-1400.webp"/> <img src="/assets/img/2023-04-13-org-estimates/agenda-good.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This asks for some explanation:</p> <ol> <li>Estimates: <ul> <li>The semantics of "estimate" column is "about how much of this I will do today". As I mentioned, ideally, this must mean how much the task takes in total. But if it's a "look into X" type of task, this means how much I will bite off just today. <code class="language-plaintext highlighter-rouge">e</code> sets the effort if you're in the agenda window.</li> <li>The "estimate" column is not synchronized with org clocking. Almost. It is possible, but I like to keep it simple.</li> </ul> </li> <li>Priorities: <ul> <li>The A B C D priorities correspond to the four squares I mentioned earlier. <ul> <li>(A and C are important, A and B are urgent, everything else is the opposite.)</li> </ul> </li> <li>C is the most common one. A appears when I have some deadlines. B and D are more rare, since if it's not important, why is it even in my calendar? <ul> <li>D is there to handle FOMO, because I don't want to forget about this cool thing I wanted to check out.</li> <li>B is there to remind me I can let go of certain things without any (external) penalty.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">S-up/S-down</code> make it easy to change the priority of a task.</li> </ul> </li> <li>I don't need tags or categories in agenda because I never use them, and they make the whole thing look cluttered. For disambiguation I often prefix the task name with some code shorthand, e.g. "Thesis: initialise the repo". Simple is good.</li> </ol> <p>In addition to the agenda incentivising me to fill everything in properly (irregular patterns make me stressed, so I fill everything in), I also have a "daily planning" task that is called "Plan the day (priorities + estimates)". This is supposed to help to reestablish a habit after a longer break.</p> <p>Here is a relevant piece of code that generates and uses the pretty effort estimates:</p> <div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defvar</span> <span class="nv">effort-ticks</span> <span class="o">'</span><span class="p">(</span><span class="nv">?</span><span class="err">■</span> <span class="nv">?</span><span class="err">◣</span><span class="p">)</span>
  <span class="s">"Ticks used in the progress bar. The first tick must represent the full one,
   and consequitive N are marking half-steps in a linear way. Must be at least length 2."</span><span class="p">)</span>
<span class="p">(</span><span class="nb">defvar</span> <span class="nv">effort-tick-size</span> <span class="mi">15</span>
  <span class="s">"Number of minutes (integer) the full effort tick represents"</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">effort-bar-round</span> <span class="p">(</span><span class="nv">minutes</span><span class="p">)</span>
  <span class="s">"Given (N, a, b) where b | a, represents N as N' = u * a + v * b, such
   that N' is close to N, but at the same time N' &gt; 0 always."</span>
  <span class="p">(</span><span class="k">let*</span>
      <span class="p">((</span><span class="nv">effort-small-tick-size</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">float</span> <span class="nv">effort-tick-size</span><span class="p">)</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">effort-ticks</span><span class="p">)))</span>
       <span class="p">(</span><span class="nv">minutes-rounded</span>
        <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">minutes</span> <span class="nv">effort-tick-size</span><span class="p">)</span> <span class="nv">effort-tick-size</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nb">fround</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">minutes</span> <span class="nv">effort-tick-size</span><span class="p">)</span> <span class="nv">effort-small-tick-size</span><span class="p">))</span>
              <span class="nv">effort-small-tick-size</span><span class="p">)))</span>
       <span class="p">(</span><span class="nv">big-ticks</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">minutes-rounded</span> <span class="nv">effort-tick-size</span><span class="p">)))</span>
       <span class="p">(</span><span class="nv">quotient</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">minutes-rounded</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">big-ticks</span> <span class="nv">effort-tick-size</span><span class="p">)))</span>
       <span class="p">(</span><span class="nv">small-ticks</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">minutes-rounded</span> <span class="mi">0</span><span class="p">)</span>
                        <span class="mi">1</span>
                      <span class="p">(</span><span class="nb">round</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">quotient</span> <span class="nv">effort-small-tick-size</span><span class="p">))))</span>
       <span class="p">)</span>
    <span class="p">(</span><span class="nv">cl-values</span> <span class="nv">big-ticks</span> <span class="nv">small-ticks</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">effort-bar</span> <span class="p">(</span><span class="nv">effort</span><span class="p">)</span>
  <span class="s">"Draws a visual effort bar to be used in agenda."</span>
  <span class="p">(</span><span class="k">if</span> <span class="nv">effort</span>
      <span class="p">(</span><span class="nv">save-match-data</span>
        <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">string-match</span> <span class="s">"\\([0-9]+\\):\\([0-9]+\\)"</span> <span class="nv">effort</span><span class="p">)</span>
          <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">hours</span> <span class="p">(</span><span class="nv">string-to-number</span> <span class="p">(</span><span class="nv">match-string</span> <span class="mi">1</span> <span class="nv">effort</span><span class="p">)))</span>
                 <span class="p">(</span><span class="nv">minutes</span> <span class="p">(</span><span class="nv">string-to-number</span> <span class="p">(</span><span class="nv">match-string</span> <span class="mi">2</span> <span class="nv">effort</span><span class="p">)))</span>
                 <span class="p">(</span><span class="nv">total-minutes</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">minutes</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">hours</span> <span class="mi">60</span><span class="p">))))</span>
            <span class="p">(</span><span class="nv">cl-multiple-value-bind</span>
                <span class="p">(</span><span class="nv">total-big-ticks</span> <span class="nv">total-small-ticks</span><span class="p">)</span>
                <span class="p">(</span><span class="nv">effort-bar-round</span> <span class="nv">total-minutes</span><span class="p">)</span>
              <span class="p">(</span><span class="nv">concat</span> <span class="p">(</span><span class="nb">make-string</span> <span class="nv">total-big-ticks</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">effort-ticks</span><span class="p">))</span>
                      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">total-small-ticks</span> <span class="mi">0</span><span class="p">)</span>
                          <span class="s">""</span>
                        <span class="p">(</span><span class="nb">string</span> <span class="p">(</span><span class="nb">nth</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">effort-ticks</span><span class="p">)</span> <span class="nv">total-small-ticks</span><span class="p">)</span>
                                     <span class="nv">effort-ticks</span><span class="p">))))))))</span>
    <span class="s">""</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">effort-visual</span> <span class="p">()</span>
  <span class="s">"Prints effort + effort bar."</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">effort</span> <span class="p">(</span><span class="nv">org-entry-get</span> <span class="no">nil</span> <span class="s">"EFFORT"</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="nv">effort</span>
        <span class="p">(</span><span class="nb">format</span> <span class="s">"%-5s%-9s"</span> <span class="nv">effort</span> <span class="p">(</span><span class="nv">effort-bar</span> <span class="nv">effort</span><span class="p">))</span>
      <span class="s">"              "</span><span class="p">)))</span>

<span class="p">(</span><span class="k">setq</span> <span class="nv">org-agenda-prefix-format</span>
  <span class="o">'</span><span class="p">((</span><span class="nv">agenda</span> <span class="o">.</span> <span class="s">" % t%7 s%(effort-visual)"</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">todo</span> <span class="o">.</span> <span class="s">" %-8:c "</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">tags</span> <span class="o">.</span> <span class="s">" %-5:s "</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">search</span> <span class="o">.</span> <span class="s">" %-8:c "</span><span class="p">)))</span>
</code></pre></div></div> <p>The symbols are font-dependent, and so I keep this comment around in my <code class="language-plaintext highlighter-rouge">.emacs</code> in case I need to adjust something after a system update:</p> <div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">; https://en.wikipedia.org/wiki/Geometric_Shapes_(Unicode_block)</span>
    <span class="c1">; https://en.wikipedia.org/wiki/Braille_Patterns</span>
    <span class="c1">; https://en.wikipedia.org/wiki/Box-drawing_character</span>
    <span class="c1">;  ◐ ◔ ◕ ⬤◐</span>
    <span class="c1">; ▂▄▅▆▇█</span>
    <span class="c1">;   ▉▋▋▌▍▏</span>
    <span class="c1">; ▪■◼◼︎◼■▤▦◧▣◼□▢◻▯◺◣</span>
    <span class="c1">; ⣿⣧⡇⡄ ⣷ ⣦ ⣇ ⣄ ⠶</span>
    <span class="c1">; ◭▲</span>
</code></pre></div></div> <p>Everything else, except for these visual estimates, is a default feature of emacs. Although not novel, here is how the separation between categories in agenda is achieved:</p> <div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">org-agenda-custom-commands</span>
      <span class="o">'</span><span class="p">((</span><span class="s">"w"</span> <span class="s">"Week agenda"</span>
         <span class="p">(</span>
          <span class="p">(</span><span class="nv">agenda</span> <span class="s">""</span> <span class="p">((</span><span class="nv">org-agenda-span</span> <span class="mi">7</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-start-on-weekday</span> <span class="no">nil</span><span class="p">)</span> <span class="c1">; starting today</span>
                      <span class="p">(</span><span class="nv">org-agenda-entry-types</span> <span class="o">'</span><span class="p">(</span><span class="ss">:deadline</span> <span class="ss">:scheduled</span> <span class="ss">:sexp</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">org-deadline-warning-days</span> <span class="mi">30</span><span class="p">)))))</span>
        <span class="p">(</span><span class="s">"a"</span> <span class="s">"Single day agenda"</span>
         <span class="p">(</span>
          <span class="p">(</span><span class="nv">agenda</span> <span class="s">""</span> <span class="p">((</span><span class="nv">org-agenda-span</span> <span class="mi">1</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-files</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/org/study.org"</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">org-agenda-entry-types</span> <span class="o">'</span><span class="p">(</span><span class="ss">:deadline</span> <span class="ss">:scheduled</span> <span class="ss">:sexp</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">org-agenda-format-date</span> <span class="s">""</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-overriding-header</span> <span class="s">"   Academic/Office"</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-deadline-warning-days</span> <span class="mi">30</span><span class="p">)</span>
                      <span class="p">))</span>
          <span class="p">(</span><span class="nv">agenda</span> <span class="s">""</span> <span class="p">((</span><span class="nv">org-agenda-span</span> <span class="mi">1</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-files</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/org/private.org"</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">org-agenda-format-date</span> <span class="s">""</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-entry-types</span> <span class="o">'</span><span class="p">(</span><span class="ss">:deadline</span> <span class="ss">:scheduled</span> <span class="ss">:sexp</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">org-deadline-warning-days</span> <span class="mi">30</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">org-agenda-overriding-header</span> <span class="s">"   Private"</span><span class="p">)</span>
                      <span class="p">))))))</span>
</code></pre></div></div> <p>One nice extra bonus is that daily agenda is generated significantly faster than a weekly one. If you were searching for a way to speed up your agenda generation, that's as far as I know the most effective one.</p> <p>And that's it! It kind of works, both technically and behaviorally; or at least it works for me ©.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Про втому</title><link href="https://volhovm.github.io/blog/2022/exhaustion/" rel="alternate" type="text/html" title="Про втому"/><published>2022-10-04T00:00:00+00:00</published><updated>2022-10-04T00:00:00+00:00</updated><id>https://volhovm.github.io/blog/2022/exhaustion</id><content type="html" xml:base="https://volhovm.github.io/blog/2022/exhaustion/"><![CDATA[<p>Схрещені руки гріють мої груди, ще ніби повні життя.<br/> Звідки мені знати, чого вона хотіла?<br/> В пальцях – я, знаю. Складніше сказати що саме – не я.<br/> Не розібрати наголосів мови свого тіла.<br/></p> <p>Дзеркало в ванні натякає на втому,<br/> Втому щоранку зустрічати думки свої одноманітні.<br/> Вересня холод зустрів мене в тонких брюках,<br/> Лагідно нагадав не давати собі поради хибні.<br/></p> <p>Бо жалю не вистачає тепер ні на кого.<br/> Витерти пару зі скла гладкої поверхні;<br/> Зі скрипом; зупинитись, обійняти себе, завмерти.<br/> Тиша, репетативність думок, ідей з пам’яті стертих.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Схрещені руки гріють мої груди, ще ніби повні життя. Звідки мені знати, чого вона хотіла? В пальцях – я, знаю. Складніше сказати що саме – не я. Не розібрати наголосів мови свого тіла.]]></summary></entry><entry><title type="html">Зарисовка первого дня</title><link href="https://volhovm.github.io/blog/2022/first-day-sketch/" rel="alternate" type="text/html" title="Зарисовка первого дня"/><published>2022-05-14T00:00:00+00:00</published><updated>2022-05-14T00:00:00+00:00</updated><id>https://volhovm.github.io/blog/2022/first-day-sketch</id><content type="html" xml:base="https://volhovm.github.io/blog/2022/first-day-sketch/"><![CDATA[<style type="text/css">p{text-align:justify}</style> <p>Тут я буду писать про пустоту. Без какой-либо лишней претенциозности. Пустота в моем литературном образовании очевидна – и эту пустоту я могу заполнить лишь импровизацией. Чайка напротив моего окна повернула голову в профиль, застыла на несколько секунд, и полетела за своими коллегами (возможно, тоже разочарованными положением дел на крыше театра напротив моего окна).</p> <p>Много лет я писал в стол. И, наверное, буду продолжать. В какой-то момент я начал ценить сам акт письма – ясность, которую он придает моменту, и полный контроль над временем, который как бы линейно заложен в группу несвязных строк. Ясность, верно, иллюзорна, как и многие истории, которые мы друг другу рассказываем. Чайки у дома напротив, но немного справа, не знают ничего про иллюзии, второй год воспитывая крошечных чаинок на площадке трубы дома напротив (но немного справа от моего окна), в первые месяцы похожих на заплесневелые рисовые шарики. Очень down-to-earth, очень заземлённо проходит воспитание чаинок. С площадки этой, размером всего лишь в несколько квадратных футов, вниз они не спрыгивают, хотя поглядывают. Им рассказали, что внизу смерть (а вверху миф о свободе?)? Или несуществующие эдинбургские дворники могут поведать больше о глупой суицидальности этих серо-коричневых птенцов?</p> <p>Но от этого я устал. От этой вечной импульсивности и суеты. Возможно, если хватит моих сил, на свет появится проект, помогающий объединить разрозненные заметки в читабельную карту. И тогда я напишу о нём. Это будет большое дело, вместо дел маленьких. Но большие истории не состоят из какой-то особой большеисторической материи, а вполне себе из историй поменьше (пласко губцы). А значит, нужно с чего-то начать. Какую историю я расскажу себе про эту заметку впоследствии? В её начале – свет второй половины дня, падающий через окно многоэтажки на чью-то нежную кожу; свет воодушевления одной моментарной идеей, полной любви; преломленный через призму жизненной драмы; и появившийся на моем глупом лбу, как солнечный зайчик, пропавший из виду (на какие-то несколько месяцев), чтобы удивить меня снова. Таких призм, к слову, дома лежит целая коробка – черная, с крышкой, чтобы не отсвечивали. В конце текущей истории первого дня – тоже этот свет. В конце третьего абзаца не будет птиц, потому что автор – щенок.</p> <p><i>/полная презрения вычурная каллиграфическая подпись, оборванная посередине/</i></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Linear Relations on QAP Polynomials</title><link href="https://volhovm.github.io/blog/2021/qap/" rel="alternate" type="text/html" title="Linear Relations on QAP Polynomials"/><published>2021-03-16T00:00:00+00:00</published><updated>2021-03-16T00:00:00+00:00</updated><id>https://volhovm.github.io/blog/2021/qap</id><content type="html" xml:base="https://volhovm.github.io/blog/2021/qap/"><![CDATA[<style type="text/css">p{text-align:justify}figure{text-align:center;margin-left:auto;margin-right:auto}.img-fluid{max-width:85%}</style> <p><small> <em>(originally posted <a href="https://priviledge-project.eu/news/linear-relations-on-qap-polynomials-1">here</a> as part of the PRIViLEDGE project, EU 2020 HORIZON; however that website seems to have died)</em> </small></p> <p>To use zk-SNARKs in bigger protocols, we must prove their security in an "extended" environment, that is considering all possible interactions of the zk-SNARK primitive with other protocols. Universal Composability (UC, [<a href="#ref1">1</a>]) is a security framework that allows modelling precisely that, and it is a common target for security proofs of protocols, aimed at privacy and zero-knowledge [<a href="#ref2">2</a>,<a href="#ref3">3</a>,<a href="#ref4">4</a>,<a href="#ref5">5​</a>]. However, one cannot use zk-SNARKs in UC proofs directly — this is a known issue stemming from the fact that (standard model) SNARKs are succinct, and thus inherently <em>white-box</em> <a href="#ref6">[6]</a>, which intuitively means that security definitions must assume knowledge of the code of the adversary. Such an assumption is stronger than what UC works with, and therefore one must resort to alternative techniques. One option is to use a non-succinct NIZK (e.g. Gro06 [<a href="#ref7">7</a>]), but this comes at the cost of performance, and may even render the protocol impractical. Another way is to apply certain transformations that make a SNARK black-box secure (e.g. C0C0 framework [<a href="#ref16">16</a>]).</p> <p>In our recent work [<a href="#ref8">8</a>], we show two results that help to overcome this problem. First, we investigate a new security notion, which allows proof randomization (called <em>weak SE</em>), and show that Groth16 SNARK [<a href="#ref9">9</a>], which is nearly-optimal and is commonly used, achieves it. Second, we show that with the help of this new security notion one can build black-box constructions that realize a (randomizable) UC functionality. This is often enough for practical applications, and comes at a smaller performance overhead than heavier transformations.</p> <p>In this article, however, we focus on a technical detail that arises in our work, and which was observed before. This detail is a <em>QAP linear and span independence</em> requirement, that is assumed by our security theorems. We believe that this property, although investigated before, was not sufficiently explained, and this article tries therefore to fill this gap.</p> <h2 id="qap-and-r1cs">QAP and R1CS</h2> <p>We first remind the reader how arithmetic circuits are constructed and what a Quadratic Arithmetic Program is.</p> <p>Consider an arithmetic circuit \(C\) over the prime field \(\mathbb{F}_p = GF(p)\), that is a set of wires and gates computing some value, where the gates are multiplicative and of the following form. From the set of all \(m\) wires with values \(a_1 \ldots a_m\), the gate outputs</p> \[(k_0 + a_1 k_1 + \ldots + a_m k_m)(c_0 + a_1 c_1 + \ldots + a_m c_m)\] <p>where \(k_i, c_i\) are field elements specific for this gate. That is, each multiplication gate also includes additive gates to linearly pre-combine the input values. Let \(n\) be the number of such gates. Note that since each gate has an output wire (which cannot be used as its input, nor can its dependencies), \(m &gt; n\). The difference between the two is the number of circuit input wires. Let us say that these are split into two categories: \(l\) public input wires, and \(l_w\) private input wires (these correspond to the NP instance and witness). We assume that there is a single output wire of a circuit that is connected to the wire 0 with constant value 1. The following image illustrates the general structure of a circuit; grey labels are "wire values", and blue is used to denote the "internal wires". The upper left triangle is a possible "public input data computation", which is highlighted only to emphasize that not all internal computations involve witness wires.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2021-03-16-qap/qap-2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2021-03-16-qap/qap-2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2021-03-16-qap/qap-2-1400.webp"/> <img src="/assets/img/2021-03-16-qap/qap-2.png" style="max-width: 60%;" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, a Quadratic Arithmetic Circuit ([<a href="#ref15">15</a>], QAP) for this circuit \(C\) consists of the quotient polynomial \(t(X)\) of degree \(n\), and three sets of polynomials \(\{u_i(X), v_i(X), w_i(X)\}_{i=0}^m\) of degree \(n-1\). The main property of this system is that the assignment \(\{a_i\}\) in \(C\) is valid if and only if \((\sum a_i u_i(X))(\sum a_i v_i(X)) - (\sum a_i w_i(X)) = 0\) modulo \(t(X)\).</p> <p>Another commonly used circuit representation is R1CS (rank-1 constraint system). In this representation, every constraint corresponds to a multiplication gate of the form we described above, and each such constraint is formed by three vectors: \(A = k\) (vector of coefficients that are used to construct the left input of the gate), \(B = c\) (same, w.r.t. the right input), and the output vector \(C\) with the only \(1\) in the position \(i\) (where \(i\) is the gate output wire index), and all other positions \(0\). So, the "evaluation" of the constraint on the wire assignment \(\{a_i\}\) corresponds to \(\langle\{a_i\},A\rangle\cdot\langle\{a_i\},B\rangle = \langle\{a_i\},C\rangle = a_j\) (angle brackets denote dot product). We use the notation \((A_j,B_j,C_j)\) to refer to the description of constraint number \(j\).</p> <p>The QAP equation can be thought to evaluate all these constraints simultaneously. The polynomial \(t(X)\) is defined as a product of \(\prod_{j=1}^n t_j(X) = \prod_{j=1}^n X - r_j\), with \(r_j\) distinct, each corresponding to a multiplication gate (thus degree \(n\)). If \(\sum a_i u_i(X)\) is viewed as \(\langle \{a_i\}, U(X)\rangle\), with the second element being a vector of \(u_i(X)\), then \(\langle\{a_i\}, U(r_j)\rangle = \langle\{a_i\}, A_j\rangle\). In other words, QAP polynomials <em>interpolate</em> R1CS constraints, and the QAP equation reduces to each constraint when viewed modulo \(t_j(X)\) (e.g. when we evaluate \(X = r_j\)).</p> <p>Here is how it looks like. On the top we present R1CS constraints evaluated on some (grey) vector of wire values. On the bottom we show a corresponding QAP, which is, when evaluated on \(X = r_j\) (or equivalently viewed modulo \(t_j(X)\)), becomes the second R1CS constraint.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2021-03-16-qap/qap-4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2021-03-16-qap/qap-4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2021-03-16-qap/qap-4-1400.webp"/> <img src="/assets/img/2021-03-16-qap/qap-4.png" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="qap-linear-independence-requirement">QAP Linear Independence Requirement</h2> <p>In our weak SE proof of Groth16 (and also in the proof of our second black-box construction), we use the assumption that \({u_0(X) \ldots u_l(X)}\) are linearly independent (LID), and that furthermore the span of this set does not intersect with the span of \({u_{l+1}(X)\ldots u_m(X)}\), that is the two sets are mutually linearly independent. This assumption was introduced previously, and it also appears, for instance, in Groth-Maller17 [<a href="#ref10">10</a>], and [<a href="#ref11">11</a>]. But what is the intuition behind this property, and why is it reasonable to assume it?</p> <p>First, recall that by linear independence of \(\{u_i(X)\}_{\mathcal{I}}\) for some \(\mathcal{I}\) we have that \(\forall k_0 \ldots k_l \in \mathbb{F}_p \ldotp\) \(\sum_{\mathcal{I}} k_i u_i(X) = 0\) implies \(k_i = 0\) for all \(i \in \mathcal{I}\). We interpret polynomials as vectors in \(\mathbb{F}_p^n\) (since the degree of \(u_i(X)\) is \(n-1\)). Immediately we notice that it is not possible for the whole set \(u_0(X) \ldots u_m(X)\) (similarly for \(v_i(X)\) and \(w_i(X)\)) to be linearly independent. The polynomials are of degree \(n-1\), and there are \(m+1\) of them, where \(n\) is the number of gates and \(m\) is the number of wires. Since each gate has exactly one output wire, \(m = n + l + l_w\), where \(l\) is the number of public inputs, and \(l_w\) is the number of private witness inputs. Therefore, the maximal possible rank of the matrix with \(u_i(X)\) concatenated (as either rows or columns) is \(n\), and thus full linear independence is impossible. This also means that by requiring \(\{u_0(X) \ldots u_l(X)\}\) LID, we imply \(\{u_{l+1}(X) \ldots u_m(X)\}\) LD (linearly dependent).</p> <h2 id="relevant-resources">Relevant Resources</h2> <p>Most of the public resources on the issue lead in one way or another to the following discussion of a bug in the zk-SNARK by Ben-Sasson et al. [<a href="#ref11">11</a>]. The following list attempts to summarize the public information covering the issue of QAP linear independence.</p> <ul> <li>The zk-SNARK presented in [<a href="#ref11">11</a>] is built on Pinocchio, and its Lemma 2.4, claiming the existence of QAP for circuits, also says that the constructed QAP satisfies a "non-degeneracy" condition. The original version of the paper by this means that \(\{u_i(X)\}_{i=0}^l\) are non-zero and distinct.</li> <li>The note by Brian Parno [<a href="#ref12">12</a>] describes a bug that does not appear in Pinocchio, but is present in the original technical (full) version of [<a href="#ref11">11</a>], precisely in this non-degeneracy condition. The bug does not merely add instance-malleability to the proofs, but breaks soundness of the NIZK. The new, revised version of [<a href="#ref11">11</a>], now states (in the same Lemma 2.4) that \(u_i(X)\) are linearly independent for the first \(l\) (input) wires. Furthermore, the new version suggests how to satisfy this requirement: adding \(1+l\) constraints is enough to achieve the non-linearity condition: \(1 \cdot 0 = 0\) and \(a_i \cdot 0 = 0\) for \(i \in [1,l]\).</li> <li>The <a href="https://leastauthority.com/blog/a-bug-in-libsnark/">blog post</a> by Least Authority called "A Bug in libsnark" describes this very same bug, but with respect to the particular implementation in <code class="language-plaintext highlighter-rouge">libsnark</code>, in the module that converts R1CS to QAP. More details on the bug are provided, essentially describing the same technique of adding \(n+1\) linear constraints as in the new version of [<a href="#ref11">11</a>].</li> <li>The <a href="http://coders-errand.com/how-to-build-a-quadratic-arithmetic-program/">blog post</a> by Alex Pinto, "How to Build a Quadratic Arithmetic Program", following [<a href="#ref11">11</a>], mentions that the non-degeneracy condition constraints must be introduced for conversion from R1CS to QAP, that lead to QAP linear independence, without giving a detailed explanation.</li> <li>Ariel Gabizon in the eprint note [<a href="#ref13">13</a>] identifies another issue with [<a href="#ref11">11</a>]. The proposed way to fix it (Section 3) also includes the linear disjointness condition (span independence), as in our work. They notice that this condition is also satisfied in QAP of <code class="language-plaintext highlighter-rouge">libsnark</code>, and also that it appears in a relevant MPC protocol for SNARK public parameters generation [<a href="#ref14">14</a>]. The updated version of [<a href="#ref11">11</a>] now contains this condition too, and the Remark 2.5 now also includes a comment on it.</li> </ul> <p>Other than that, there is little or no information on the LID requirement, and even the presented articles do not explain how exactly does the transformation of [<a href="#ref11">11</a>]. This note attempts to provide some explanation and description of the mentioned linear and span independence properties.</p> <h2 id="aligned-linear-independence">Aligned Linear Independence</h2> <p>It is tempting to intuitively connect the linear independence condition of \(u_i(X)\) with some circuit property. Although it is harder to find a good intuition for standard LID, we explain one such possible interpretation for the <em>weaker</em> case of <em>aligned LID</em> first, which we introduce exactly with this purpose. We say that a QAP has <strong>aligned linear dependence</strong> if \({(u_{i,0} \ldots u_{i,n-1}, v_{i,0} \ldots v_{i,n-1}, w_{i,0}, \ldots w_{i,n-1})}\) are linearly dependent for some subset of indices \({0\ldots m}\). That is, we consider 3n-vectors \((u_i(X), v_i(X), w_i(X))\) instead of viewing each \(p_i(X)\) (with \(p ∈ {u,v,w}\)) separately.</p> <p>Assume aligned LD of two vectors first: \((u_1(X),v_1(X),w_1(X)) = k \cdot (u_2(X),v_2(X),w_2(X))\). It is easy to see that if \({a_0 \ldots a_m}\) is a QAP-satisfying wire assignment, then for all \(e \in \mathbb{F}_p\):</p> \[a_1 p_1(X) + a_2 p_2(X) = e p_1(X) + (a_2 + k (a_1 - e)) p_2(X)\] <p>for \(p ∈ {u,v,w}\). Because of perfect soundness of the QAP, this alternative assignment \(\{a_i'\}\), where \(a_1' = e, a_2' = (a_2 + k (a_1 - e))\), and all other \(a_i' = a_i\), must also satisfy the relation. In the circuit, this ad-hoc replacement of two wires in the assignment is possible in several cases. It could be that the wires are free, not used in any gates at all, then <em>any</em> assignment on them satisfies the circuit, and in particular both \(\{a_i\}\) and \(\{a_i'\}\). Or it could also be that \(a_1\) is an input wire, \(a_2\) is an output wire, and between them there is some multi-gate computation \(a_2 = f(a_1, a_3 \ldots a_m)\) with \(f\) linear in \(a_1\).</p> <p>The example generalizes to aligned linear dependence of many vectors. That is, if a subset of \(n\) 3-vectors is linearly dependent, then we can set any \(n-1\) wires from the corresponding set to arbitrary values \(\{e_i\}\), and the last value will be defined as a linear combination of these \(\{e_i\}\). It could be that these \(n\) wires are not connected to anything at all, or that they form a bamboo (non-branching tree) of trivial multiplication gates: each successive gate output is a linear function of the previous wire.</p> <p>These few examples should give <em>some</em> intuition about what circuits can have aligned LID, but they do not constitute a complete characterization.</p> <h2 id="non-aligned-linear-independence">Non-Aligned Linear Independence</h2> <p>The <strong>non-aligned</strong> linear independence of \(\{u_i(X)\}\) is a stronger requirement than the aligned variant we just overviewed: whenever \(\{u_i(X)\}\) are LID, the whole QAP is aligned LID. (This is easy to see, as when we have aligned LD with coefficients \(\{k_i\}\) for some set of indices \(\mathcal{I}\), the same set of coefficients forms linearly dependent combinations for each \(u_i(X),v_i(X),w_i(X)\)). In the previous case of aligned LID we merely used QAP correctness (that is, the QAP equation) to deduce the intuition of linear dependency of wires. Now, to analyse non-aligned linear independence of each \({p_i(X)}\) separately, we will check if this desired linear independence condition can be satisfied by construction [<a href="#ref15">15</a>]. We remind that what we need to achieve for our theorem to go through is: \(\{u_i(X)\}_{0}^l\) LID, and \(\text{Span}(\{u_i(X)\}_0^l) \cap \text{Span}(\{u_i(X)\}_{l+1}^m) = \emptyset\).</p> <p>Observe that each \(u_i(X)\) modulo \(t_j(X)\) is a coefficient \(A_{j,i}\) that specifies by which the corresponding left input a wire number \(i\) should be linearly scaled before performing gate number \(j\) multiplication. So for a fixed wire number \(i\), \(u_i(X)\) modulo all \(t_j(X)\) gives us the set of all these \({A_{j,i}}\) — all left scalars this wire \(i\) participates in as a left input. If \(u_1(X) \ldots u_l(X)\) are linearly dependent (\(\sum_{i=1}^l k_i u_i(X) = 0\)), then reviewing this sum modulo \(t_j(X)\) for each \(j\) gives us \(\sum k_i A_{j,i} = 0\) (note that \(k_i ∈ \mathbb{F}_p\) does not reduce modulo \(t_j(X) = X - r_j\)). Therefore, if \(u_i(X)\) are LD, then all these equations are satisfied over all \(t_j(X)\): for each gate \(j\), for each corresponding \(A_{j}\), the set of \(k_i\) satisfies the dot product w.r.t. \(A_{j,i}\). On the contrary, what linear <em>independence</em> would imply, is that for any \({k_i}\) there is at least one gate that this combination does not work with. We can achieve LID for a subset of wires by performing a simple circuit transformation, as suggested in [<a href="#ref11">11</a>].</p> <p>To make the \(u_1(X)\ldots u_l(X)\) linearly independent, we create \(l\) extra gates (let their indices be \(0\) to \(l\) too, so we prepend them to the beginning of the list), where each gate number \(j\) uses exactly one input wire number \(i\) as a left input, and value 0 as a right input. So, for \(j \in [0,l]\) we set \(A_{j,j} = 1\), and all other \(A_{j,i} = 0\), as well as \(B_{j,i} = C_{j,i} = 0\) except for \(C_{j,l+l_w+j} = 1\) (if we assume \(l+l_w+j\) is an index of output wire of gate number \(j\)). Similarly, for \(u_0(X)\) we create a single gate (number \(0\)) that takes the constant wire number \(0\) (carrying constant value \(1\)) with coefficient \(1\), for the left input, and sets right input to \(0\). On the following illustration the additional gates are drawn in green; note that they lack right input, but still have an output wire.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2021-03-16-qap/qap-3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2021-03-16-qap/qap-3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2021-03-16-qap/qap-3-1400.webp"/> <img src="/assets/img/2021-03-16-qap/qap-3.png" style="max-width: 60%;" class="img-fluid rounded" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, the sum modulo each \(t_j(X)\) for \(j \in [0,l]\) reduces to \(k_j A_{j,j} = 0\). Since \(A_{j,j} = 1\), \(k_j = 0\), and since we do it for each \(j\), <em>each</em> coefficient of the linear combination is zero, and thus it is trivial. So the first linear independence condition is satisfied.</p> <p>Regarding the second condition, span independence of \(u_0(X) \ldots u_l(X)\) and \(u_{l+1}(X)\ldots u_m(X)\), assume by contradiction that \(f(X) = \sum_0^l k_{1,i} u_i(X) = \sum_{l+1}^m k_{2,i} u_i(X)\) and \(f(X) \neq 0\). When viewed modulo \(t_j(X)\) for \(j \in [0,l]\) (our extra gates), the left hand side becomes \(\sum_0^l k_{1,i} A_{j,i} = k_{1,j} A_{j,j}\). The right side is, similarly, \(\sum_{l+1}^m k_{2,i} A_{j,i}\). But since wires \([l+1,m]\) are not used as <em>left inputs</em> for the gates \([0\ldots l]\) (these gates receive inputs strictly from wires \([0\ldots l]\)), we must have \(A_{j,i} = 0\) for \(i ∈ [l+1,m]\). Therefore, any \(\sum_{l+1}^m k_{2,i} u_i(X)\) is zero modulo \(t_j(X)\) for \(j ∈ [0,l]\), and thus, as before we are only left with LHS \(k_{2,j} A_{j,j} = 0\) which implies \(k_{2,j} = 0\), for each such \(j\). So \(f(X) = 0\), a contradiction, which proves span independence.</p> <p><em>This shows why the transformation of [<a href="#ref11">11</a>] is enough to satisfy both conditions necessary for the theorems in our work [<a href="#ref8">8</a>].</em></p> <p>The last thing we would like to note is that if we apply the transformation to <em>both public and private witness wires</em>, we obtain aligned LID of <em>all</em> QAP wires.</p> <p>First we claim that the set \(\{w_0(X), w_{l+l_w+1}(X)\ldots w_m(X)\}\), corresponding to the multiplication-gate output wires (call these indices \(\mathcal{I}_o\)), is linearly independent. Observe that \(w_i(X) = 1 \text{ mod } t_j(X)\) where \(i\) is the output wire of gate \(j\), and it is \(0\) modulo \(t_\iota(X)\) for all other \(\iota\) — hence if the set is linearly dependent, with coefficients \(\{k_i\}\) then \(\sum_{\mathcal{I}_0} k_i w_i(X)\) modulo \(X - r_j\) implies \(k_i \cdot 1 = 0\). Therefore, in every linear combination \(\{k_i\}\) such that \(\sum k_i w_i(X) = 0\), each coefficient is zero, and this set is linearly independent. Since the set is of size \(n\) and each \(w_i(X)\) in it is a n-vector, the corresponding matrix of \(w_i(X)\) concatenated is full rank.</p> <p>Regarding the input wires set \(\{w_i(X)\}_{i=1}^{l+l_w}\), each element of it is set to be \(0\) modulo each \(t_i(X)\), and thus modulo \(t(X) = \prod t_i(X)\) (by CRT). Since \(w_i(X)\) maximum degree is \(n-1\), being zero modulo \(t(X)\) means being constant zero, so these prefix \(w_i(X)\) (for input wires) are (trivially) linearly dependent.</p> <p>Now, this means that if we have a nontrivial aligned linear combination, it must include at least one coefficient from the set of input wires \(\mathcal{I}_i := [1,l+l_w]\) (public or private). Otherwise, when the combination of 3-vectors is limited only to gate outputs (\(\mathcal{I}_o = [0,l+l_w+1,\ldots,m]\)), the combination should also hold when viewed over \(\{w_i(X)\}\), but we have already deduced this is impossible because these polynomials are LID. But by the previous argument, as long as \(\sum k_i u_i(X)\) includes some indices \(i \in \mathcal{I}_i\) (assuming both public and private inputs transformed as explained before), all such \(k_i = 0\) — this is, again, due to the fact that only \(\mathcal{I}_i\) wires participate in our "extra" gates as left inputs, and they do it once per each such gate. So we are again in the case of linear combination limited to \(\mathcal{I}_o\), where we have already proven LID for \(\{w_i(X)\}\). Thus, we arrive at a contradiction, and the whole QAP is aligned LID.</p> <h2 id="references">References</h2> <p><a name="ref1">[1]</a> Canetti, Ran. <em>“Universally composable security: A new paradigm for cryptographic protocols.”</em> In Proceedings 42nd IEEE Symposium on Foundations of Computer Science, pp. 136-145. IEEE, 2001.</p> <p><a name="ref2">[2]</a> Kosba, Ahmed, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papamanthou. <em>“Hawk: The blockchain model of cryptography and privacy-preserving smart contracts.”</em> In 2016 IEEE symposium on security and privacy (SP), pp. 839-858. IEEE, 2016.</p> <p><a name="ref3">[3]</a> Kerber, Thomas, Aggelos Kiayias, and Markulf Kohlweiss. <em>“Kachina-Foundations of Private Smart Contracts.”</em> IACR Cryptol. ePrint Arch. 2020 (2020): 543.</p> <p><a name="ref4">[4]</a> Kerber, Thomas, Aggelos Kiayias, and Markulf Kohlweiss. <em>“Mining for Privacy: How to Bootstrap a Snarky Blockchain.”</em> IACR Cryptol. ePrint Arch. 2020 (2020): 401.</p> <p><a name="ref5">[5]</a> Kerber, Thomas, Aggelos Kiayias, Markulf Kohlweiss, and Vassilis Zikas. <em>“Ouroboros crypsinous: Privacy-preserving proof-of-stake.”</em> In 2019 IEEE Symposium on Security and Privacy (SP), pp. 157-174. IEEE, 2019.</p> <p><a name="ref6">[6]</a> Gentry, Craig, and Daniel Wichs. <em>“Separating succinct non-interactive arguments from all falsifiable assumptions.”</em> In Proceedings of the forty-third annual ACM symposium on Theory of computing, pp. 99-108. 2011.</p> <p><a name="ref7">[7]</a> Groth, Jens. <em>“Simulation-sound NIZK proofs for a practical language and constant size group signatures.”</em> In International Conference on the Theory and Application of Cryptology and Information Security, pp. 444-459. Springer, Berlin, Heidelberg, 2006.</p> <p><a name="ref8">[8]</a> Baghery, Karim, Markulf Kohlweiss, Janno Siim, and Mikhail Volkhov. <em>“Another look at extraction and randomization of Groth’s zk-SNARK.”</em> FC 2021 (2021).</p> <p><a name="ref9">[9]</a> Groth, Jens. <em>“On the size of pairing-based non-interactive arguments.”</em> In Annual international conference on the theory and applications of cryptographic techniques, pp. 305-326. Springer, Berlin, Heidelberg, 2016.</p> <p><a name="ref10">[10]</a> Groth, Jens, and Mary Maller. <em>“Snarky Signatures: Minimal Signatures of Knowledge from Simulation-Extractable SNARKs.”</em> In Annual International Cryptology Conference, pp. 581-612. Springer, Cham, 2017.</p> <p><a name="ref11">[11]</a> Ben-Sasson, Eli, Alessandro Chiesa, Eran Tromer, and Madars Virza. <em>“Succinct non-interactive zero knowledge for a von Neumann architecture.”</em> In 23rd {USENIX} Security Symposium ({USENIX} Security 14), pp. 781-796. 2014.</p> <p><a name="ref12">[12]</a> Parno, Bryan. <em>“A Note on the Unsoundness of vnTinyRAM’s SNARK.”</em> IACR Cryptol. ePrint Arch. 2015 (2015): 437.</p> <p><a name="ref13">[13]</a> Gabizon, Ariel. <em>“On the security of the BCTV Pinocchio zk-SNARK variant.”</em> IACR Cryptol. ePrint Arch. 2019 (2019): 119.</p> <p><a name="ref14">[14]</a> Bowe, Sean, Ariel Gabizon, and Matthew D. Green. <em>“A multi-party protocol for constructing the public parameters of the Pinocchio zk-SNARK.”</em> In International Conference on Financial Cryptography and Data Security, pp. 64-77. Springer, Berlin, Heidelberg, 2018.</p> <p><a name="ref15">[15]</a> Gennaro, Rosario, Craig Gentry, Bryan Parno, and Mariana Raykova. <em>“Quadratic span programs and succinct NIZKs without PCPs.”</em> In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pp. 626-645. Springer, Berlin, Heidelberg, 2013.</p> <p><a name="ref16">[16]</a> Kosba, Ahmed, Zhichao Zhao, Andrew Miller, Yi Qian, H. Chan, Charalampos PAPAMAN-THOU, Rafael Pass, SHELAT ABHI, and EC SHI. <em>“C∅ C∅: A framework for building composable zero-knowledge proofs.”</em> Cryptology ePrint Archive, Report 2015/1093 (2015).</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>